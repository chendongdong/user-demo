module.exports = (function () {
  function isObject (val) {
    if (val !== null && Object.prototype.toString.call(val) === '[object Object]') {
      return true
    }

    return false
  }

  function toArray (val) {
    return (typeof val) === 'string' || (typeof val) === 'number' ? [val] : val
  }

  function extend (mainObj, appendObj) {
    var i
    var ii
    var key
    var data = {}

    for (key in mainObj) {
      if (isObject(mainObj[key])) {
        data[key] = extend(mainObj[key], {})
      } else {
        data[key] = mainObj[key]
      }
    }

    for (i = 0, ii = appendObj.length; i < ii; i++) {
      for (key in appendObj[i]) {
        if (isObject(appendObj[i][key])) {
          data[key] = extend(mainObj[key] || {}, [appendObj[i][key]])
        } else {
          data[key] = appendObj[i][key]
        }
      }
    }

    return data
  }

  function compare (one, two) {
    var i, ii, key

    if (Object.prototype.toString.call(one) === '[object Object]' && Object.prototype.toString.call(two) === '[object Object]') {
      for (key in one) {
        if (compare(one[key], two[key])) {
          return true
        }
      }

      return false
    }

    one = toArray(one)
    two = toArray(two)

    if (Object.prototype.toString.call(one) !== '[object Array]' || Object.prototype.toString.call(two) !== '[object Array]') {
      return false
    }

    for (i = 0, ii = one.length; i < ii; i++) {
      if (two.indexOf(one[i]) >= 0) {
        return true
      }
    }

    return false
  }

  return {
    extend: extend,
    toArray: toArray,
    compare: compare
  }
})()
